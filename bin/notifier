#!/usr/bin/env node

const mongoose = require('mongoose');
const dotenv = require('dotenv');

const Account = require('../models/Account');
const Log = require('../models/Log');

const api = require('../helpers/api');
const functions = require('../helpers/functions');

if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
  dotenv.config({path: '.env'});
}

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);
mongoose.connection.on('error', (err) => {
  console.error(err);
  console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('âœ—'));
  process.exit();
});

var promises = [];
Account.find({ is_active: true }).exec()
  .catch(err => {
    console.error(err);
    process.exit();
  })
  .then(accounts => {

    accounts.forEach((account) => {
      // check for last sent and frequency

      var now = new Date();
      var hour = now.getHours();

      // sleep check
      if (account.wake_time) {
        var wake_time = new Date(account.wake_time);

        if (now.getTime() < wake_time.getTime()) return;
      }

      // from & to check
      // if ((account.from && hour < account.from) || (account.to && hour > account.to)) {
      //   return;
      // }

      // last sent check
      if (account.last_sent) {
        var last_sent = new Date(account.last_sent);

        if ((now.getTime() - last_sent.getTime()) / 60000 < (account.frequency - 1)) {
          return;
        }
      }

      promises.push(new Promise(function(resolve, reject) {

        // range check
        let is_range = false;
        if (account.range) {
          const splitStr = functions.splitString(account.range, '*:*');
          const range = splitStr[0];
          const message = splitStr[1];

          const splitRange = functions.splitString(range, '~');
          const range_start = moment(splitRange[0], 'YYYY-MM-DD HH:mm');
          const range_end = moment(splitRange[1], 'YYYY-MM-DD HH:mm');
          const now = moment();

          if (range_start.isBefore(now) && now.isBefore(range_end)) {
            // within range
            is_range = true;

            // log preset action
            const log_data = {
              sid: 'RANGE',
              account: account._id,

              message: message,
            };

            let log = new Log(log_data);
            log.save()
              .catch(err => {
                reject(err);
              })
              .then(saved_log => {
                console.log('Successfully logged ' + message + ' for ' + account.phone);
                resolve('');
              })
            ;
          }
        }

        if (! is_range) {
          // send sms to account if range is not set
          api.sendSMS(account.phone, account.prompt, (err, data) => {
            if (err) {
              reject(err);
            }

            account.last_sent = new Date().getTime();
            account.save()
              .catch(err => {
                reject(err);
              })
              .then(saved_account => {
                resolve(saved_account.phone);
              })
            ;

          });
        }

      }));

    });

    Promise.all(promises).then(
      function(phone_nos) {
        console.log('Notification sent to following : ' + phone_nos);
        process.exit();
      },
      function(err) {
        console.error(err);
        process.exit();
      })
    ;

  })
;
